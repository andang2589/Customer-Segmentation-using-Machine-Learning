# -*- coding: utf-8 -*-
"""Model1-4-features.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yG-I4KVYBgXBVBnN2Mk5ez8qPxWVkPLg

**Model 1: Phân nhóm khách hàng với nhiều thuộc tính bằng K-Means sau đó dùng Naive Bayes xây dựng mô hình dự đoán lớp cho khách hàng**

- Dùng K-Means phân nhóm khách hàng
"""

#Kết nối với Drive
from google.colab import drive
drive.mount('/content/drive')

#Tạo dataset từ file csv
import pandas as pd
df=pd.read_csv('/content/drive/MyDrive/DS102_CK/Mall_Customers.csv')

df

#Tiền xử lý dữ liệu
df=df.drop(['CustomerID'],axis=1)
df['Gender'][df.Gender == 'Male'] =  100
df['Gender'][df.Gender == 'Female'] =  50
df['Gender']=df['Gender'].astype(int)

df

#import thư viện
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt
import plotly.express as px

#Tìm K phù hợp cho thuật toán Kmeans
sil_score=[]
for i in range(2,18):
  kmeans = KMeans(n_clusters=i, init= 'k-means++', random_state=42)
  kmeans.fit(df)
  preds = kmeans.predict(df)
  score = silhouette_score(df, preds, metric='euclidean')
  sil_score.append(score)
plt.plot(range(2,18),sil_score)
plt.title('Silhouette vs. Number of Clusters')
plt.xlabel('Number of Clusters')
plt.ylabel('Silhouette score')
plt.show()

#Huấn luyện mô hình
kmeans = KMeans(n_clusters=12, init='k-means++', random_state=42)
kmeans.fit(df)
df['label']=kmeans.labels_

#Trực quan hóa bằng giá trị trung bình các thuộc tính của 12 cụm
polar=df.groupby(by=['label']).mean().reset_index()
polar=pd.melt(polar,id_vars=['label'])
fig4 = px.line_polar(polar, r='value', theta='variable', color='label',
                     line_close=True,height=400,width=700)
fig4.show()

#Thống kê số điểm dữ liệu trong 12 cụm
df.groupby('label').size().reset_index()

#Trực quan hóa sự phân bố của các điểm dữ liệu vào 12 cụm
pie=df.groupby('label').size().reset_index()
pie.columns=['label','value']
px.pie(pie,values='value',names='label',color='label')

"""- Dùng Naive Bayes xây dựng mô hình dự đoán lớp cho khách hàng


"""

#Import các thư viện
from sklearn.naive_bayes import GaussianNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
import seaborn as sns
from sklearn.metrics import classification_report

df

#Chia tập dũ liệu X thành train test với tỉ lệ 8:2
X = df.iloc[:, 0:-1].values
Y = df.iloc[:, -1].values
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size = 0.8, 
                                                    random_state = 42)

#Huấn luyện mô hình
GNB_classifier = GaussianNB()
GNB_classifier.fit(X_train, Y_train)

#In ra confusion matrix
cm = confusion_matrix(Y_test, GNB_classifier.predict(X_test))
plt.figure(figsize=(12, 12))
sns.set(font_scale=3.5)
ax = sns.heatmap(cm, cmap=plt.cm.Blues, annot=True, square=True, fmt = 'g')
ax.set_ylabel('Actual', fontsize=40 ,fontweight = 'bold')
ax.set_xlabel('Predicted', fontsize=40, fontweight = 'bold')

#Classification report
print(classification_report(Y_test, GNB_classifier.predict(X_test)))

"""**Dự đoán một khách hàng thuộc nhóm nào (Cluster 0-11)**"""

#@title Nhập các thuộc tính khách hàng { run: "auto" }
Age =  23#@param {type:"integer"}
Gender = "Female" #@param ["Male", "Female"]
Annual_Income =  16#@param {type:"integer"}
Spending_Score =  77#@param {type:"integer"}

#create a object
import numpy as np
if (Gender=='Male'):
  obj=np.array([100, Age, Annual_Income, Spending_Score])
if (Gender=='Female'):
  obj=np.array([50, Age, Annual_Income, Spending_Score])

Message = 'Cluster ' + str(GNB_classifier.predict(obj.reshape(1, -1))[0])

#button 'Predict'
import ipywidgets as widgets
from IPython.display import display
button = widgets.Button(description="Predict")
output = widgets.Output()

def on_button_clicked(b):
  with output:
    print(Message)

button.on_click(on_button_clicked)
display(button, output)