# -*- coding: utf-8 -*-
"""Model2-2-features.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MDNxhcCIb-v-SUrr_WDF2L9PPf3lxqFW

**Model 2: Phân nhóm khách hàng với hai thuộc tính bằng K-Means sau đó dùng Naive Bayes xây dựng mô hình dự đoán lớp cho khách hàng**

- Dùng K-Means phân nhóm khách hàng
"""

#Kết nối với Drive
from google.colab import drive
drive.mount('/content/drive')

#Tạo dataset từ file csv
import pandas as pd
df=pd.read_csv('/content/drive/MyDrive/DS102_CK/Mall_Customers.csv')

df

#Tiền xử lý dữ liệu
df=df.drop(['CustomerID', 
            'Gender', 
            'Age'],axis=1)

df

#import thư viện
import numpy as np
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import plotly.express as px

#Tìm K phù hợp cho thuật toán K-mean
from sklearn.metrics import silhouette_score
sil_score=[]
for i in range(2,11):
  kmeans = KMeans(n_clusters=i, random_state=0)
  kmeans.fit(df)
  preds = kmeans.predict(df)
  score = silhouette_score(df, preds, metric='euclidean')
  sil_score.append(score)
plt.plot(range(2,11),sil_score)
plt.title("Silhouette score vs No.Of cluste")
plt.show()

#Huấn luyện mô hình
kmeans = KMeans(n_clusters= 5, init='k-means++', random_state=42)
kmeans.fit(df)
df['label']=kmeans.labels_
y_kmeans= kmeans.fit_predict(df)

#Trực quan hóa các điểm dữ liệu trong 5 cụm
plt.figure(figsize=(14,7))
plt.title('Annual Income -  Spending Score Segmentation')
plt.xlabel('Annual Income') 
plt.ylabel('Spending Score')
colors=['C0','C1','C2','C3','C4']
for i in range(len(np.unique(y_kmeans))):
    plt.scatter(df.loc[y_kmeans == i, 'Annual Income (k$)'], 
                df.loc[y_kmeans == i, 'Spending Score (1-100)'], 
                s = 100, c=colors[i], label = 'Cluster {}'.format(i))
plt.scatter(kmeans.cluster_centers_[:, 0], 
            kmeans.cluster_centers_[:, 1], 
            s = 200, marker='x', c = 'black', linewidth=6, label = 'Centroids')

plt.legend()
plt.show()

#Thống kê các điểm dữ liệu trong 5 cụm
df.groupby('label').size().reset_index()

#Trực quan hóa sự phân bố các điểm dữ liệu vào 5 cụm
pie=df.groupby('label').size().reset_index()
pie.columns=['label','value']
px.pie(pie,values='value',names='label',color='label')

"""*   Dùng Naive Bayes xây dựng mô hình dự đoán lớp cho khách hàng


"""

#Import các thư viện
from sklearn.naive_bayes import GaussianNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
import seaborn as sns

df

#Chia thành tập train test theo tỉ lệ 8:2
X = df.iloc[:, 0:-1].values
Y = df.iloc[:, -1].values
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size = 0.8, 
                                                    random_state = 42)

#Huấn luyện mô hình
GNB_classifier = GaussianNB()
GNB_classifier.fit(X_train, Y_train)

#In ra confusion matrix
cm = confusion_matrix(Y_test, GNB_classifier.predict(X_test))
plt.figure(figsize=(12, 12))
sns.set(font_scale=3.5)
ax = sns.heatmap(cm, cmap=plt.cm.Blues, annot=True, square=True, fmt = 'g')
ax.set_ylabel('Actual', fontsize=40 ,fontweight = 'bold')
ax.set_xlabel('Predicted', fontsize=40, fontweight = 'bold')

#Classification report
print(classification_report(Y_test, GNB_classifier.predict(X_test)))

"""**---Predict một điểm dữ liệu---**"""

#@title Nhập các thuộc tính khách hàng { run: "auto" }
Annual_Income =  15#@param {type:"integer"}
Spending_Score =  81#@param {type:"integer"}


obj=np.array([Annual_Income, Spending_Score])


Message = 'Cluster ' + str(GNB_classifier.predict(obj.reshape(1, -1))[0])

#button 'Predict'
import ipywidgets as widgets
from IPython.display import display
button = widgets.Button(description="Predict")
output = widgets.Output()

def on_button_clicked(b):
  with output:
    print(Message)

button.on_click(on_button_clicked)
display(button, output)